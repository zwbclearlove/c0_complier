INTTK int
IDENFR a
LBRACK [
INTCON 1000
RBRACK ]
SEMICN ;
INTTK int
IDENFR seed
LBRACK [
INTCON 3
RBRACK ]
ASSIGN =
LBRACE {
INTCON 19971231
COMMA ,
INTCON 19981013
COMMA ,
INTCON 1000000007
RBRACE }
SEMICN ;
INTTK int
IDENFR staticvalue
ASSIGN =
INTCON 0
SEMICN ;
INTTK int
IDENFR myscanf
LPARENT (
RPARENT )
LBRACE {
INTTK int
IDENFR n
SEMICN ;
SCANFTK scanf
LPARENT (
IDENFR n
RPARENT )
SEMICN ;
RETURNTK return
LPARENT (
IDENFR n
RPARENT )
SEMICN ;
RBRACE }
VOIDTK void
IDENFR myprintf
LPARENT (
INTTK int
IDENFR n
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
IDENFR n
RPARENT )
SEMICN ;
RETURNTK return
SEMICN ;
RBRACE }
INTTK int
IDENFR set
LPARENT (
INTTK int
IDENFR pos
COMMA ,
INTTK int
IDENFR d
RPARENT )
LBRACE {
INTTK int
IDENFR x
LBRACK [
INTCON 31
RBRACK ]
SEMICN ;
INTTK int
IDENFR i
ASSIGN =
INTCON 10
SEMICN ;
INTTK int
IDENFR v
ASSIGN =
INTCON 0
SEMICN ;
IDENFR x
LBRACK [
INTCON 0
RBRACK ]
ASSIGN =
INTCON 1
SEMICN ;
IDENFR x
LBRACK [
INTCON 1
RBRACK ]
ASSIGN =
IDENFR x
LBRACK [
INTCON 0
RBRACK ]
MULT *
INTCON 2
SEMICN ;
IDENFR x
LBRACK [
INTCON 2
RBRACK ]
ASSIGN =
IDENFR x
LBRACK [
INTCON 1
RBRACK ]
MULT *
INTCON 2
SEMICN ;
IDENFR x
LBRACK [
INTCON 3
RBRACK ]
ASSIGN =
IDENFR x
LBRACK [
INTCON 2
RBRACK ]
MULT *
INTCON 2
SEMICN ;
IDENFR x
LBRACK [
INTCON 4
RBRACK ]
ASSIGN =
IDENFR x
LBRACK [
INTCON 3
RBRACK ]
MULT *
INTCON 2
SEMICN ;
IDENFR x
LBRACK [
INTCON 5
RBRACK ]
ASSIGN =
IDENFR x
LBRACK [
INTCON 4
RBRACK ]
MULT *
INTCON 2
SEMICN ;
IDENFR x
LBRACK [
INTCON 6
RBRACK ]
ASSIGN =
IDENFR x
LBRACK [
INTCON 5
RBRACK ]
MULT *
INTCON 2
SEMICN ;
IDENFR x
LBRACK [
INTCON 7
RBRACK ]
ASSIGN =
IDENFR x
LBRACK [
INTCON 6
RBRACK ]
MULT *
INTCON 2
SEMICN ;
IDENFR x
LBRACK [
INTCON 8
RBRACK ]
ASSIGN =
IDENFR x
LBRACK [
INTCON 7
RBRACK ]
MULT *
INTCON 2
SEMICN ;
IDENFR x
LBRACK [
INTCON 9
RBRACK ]
ASSIGN =
IDENFR x
LBRACK [
INTCON 8
RBRACK ]
MULT *
INTCON 2
SEMICN ;
IDENFR x
LBRACK [
INTCON 10
RBRACK ]
ASSIGN =
IDENFR x
LBRACK [
INTCON 9
RBRACK ]
MULT *
INTCON 2
SEMICN ;
WHILETK while
LPARENT (
IDENFR i
LSS <
INTCON 30
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
SEMICN ;
IDENFR x
LBRACK [
IDENFR i
RBRACK ]
ASSIGN =
IDENFR x
LBRACK [
IDENFR i
MINU -
INTCON 1
RBRACK ]
MULT *
INTCON 2
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR pos
DIV /
INTCON 30
GEQ >=
INTCON 1000
RPARENT )
RETURNTK return
LPARENT (
INTCON 0
RPARENT )
SEMICN ;
IFTK if
LPARENT (
LPARENT (
IDENFR a
LBRACK [
IDENFR pos
DIV /
INTCON 30
RBRACK ]
DIV /
LPARENT (
IDENFR x
LBRACK [
IDENFR pos
MINU -
IDENFR pos
DIV /
INTCON 30
MULT *
INTCON 30
RBRACK ]
RPARENT )
RPARENT )
MINU -
LPARENT (
IDENFR a
LBRACK [
IDENFR pos
DIV /
INTCON 30
RBRACK ]
DIV /
LPARENT (
IDENFR x
LBRACK [
IDENFR pos
MINU -
IDENFR pos
DIV /
INTCON 30
MULT *
INTCON 30
RBRACK ]
RPARENT )
RPARENT )
DIV /
INTCON 2
MULT *
INTCON 2
NEQ !=
IDENFR d
RPARENT )
LBRACE {
IFTK if
LPARENT (
LPARENT (
IDENFR a
LBRACK [
IDENFR pos
DIV /
INTCON 30
RBRACK ]
DIV /
LPARENT (
IDENFR x
LBRACK [
IDENFR pos
MINU -
IDENFR pos
DIV /
INTCON 30
MULT *
INTCON 30
RBRACK ]
RPARENT )
RPARENT )
MINU -
LPARENT (
IDENFR a
LBRACK [
IDENFR pos
DIV /
INTCON 30
RBRACK ]
DIV /
LPARENT (
IDENFR x
LBRACK [
IDENFR pos
MINU -
IDENFR pos
DIV /
INTCON 30
MULT *
INTCON 30
RBRACK ]
RPARENT )
RPARENT )
DIV /
INTCON 2
MULT *
INTCON 2
EQL ==
INTCON 0
RPARENT )
IFTK if
LPARENT (
IDENFR d
EQL ==
INTCON 1
RPARENT )
IDENFR v
ASSIGN =
LPARENT (
IDENFR x
LBRACK [
IDENFR pos
MINU -
IDENFR pos
DIV /
INTCON 30
MULT *
INTCON 30
RBRACK ]
RPARENT )
SEMICN ;
IFTK if
LPARENT (
LPARENT (
IDENFR a
LBRACK [
IDENFR pos
DIV /
INTCON 30
RBRACK ]
DIV /
LPARENT (
IDENFR x
LBRACK [
IDENFR pos
MINU -
IDENFR pos
DIV /
INTCON 30
MULT *
INTCON 30
RBRACK ]
RPARENT )
RPARENT )
MINU -
LPARENT (
IDENFR a
LBRACK [
IDENFR pos
DIV /
INTCON 30
RBRACK ]
DIV /
LPARENT (
IDENFR x
LBRACK [
IDENFR pos
MINU -
IDENFR pos
DIV /
INTCON 30
MULT *
INTCON 30
RBRACK ]
RPARENT )
RPARENT )
DIV /
INTCON 2
MULT *
INTCON 2
EQL ==
INTCON 1
RPARENT )
IFTK if
LPARENT (
IDENFR d
EQL ==
INTCON 0
RPARENT )
IDENFR v
ASSIGN =
IDENFR v
MINU -
LPARENT (
IDENFR x
LBRACK [
IDENFR pos
MINU -
IDENFR pos
DIV /
INTCON 30
MULT *
INTCON 30
RBRACK ]
RPARENT )
SEMICN ;
RBRACE }
IDENFR a
LBRACK [
IDENFR pos
DIV /
INTCON 30
RBRACK ]
ASSIGN =
IDENFR a
LBRACK [
IDENFR pos
DIV /
INTCON 30
RBRACK ]
PLUS +
IDENFR v
SEMICN ;
RETURNTK return
LPARENT (
INTCON 0
RPARENT )
SEMICN ;
RBRACE }
INTTK int
IDENFR rand
LPARENT (
RPARENT )
LBRACE {
IDENFR staticvalue
ASSIGN =
IDENFR staticvalue
MULT *
IDENFR seed
LBRACK [
INTCON 0
RBRACK ]
PLUS +
IDENFR seed
LBRACK [
INTCON 1
RBRACK ]
SEMICN ;
IDENFR staticvalue
ASSIGN =
IDENFR staticvalue
MINU -
IDENFR staticvalue
DIV /
IDENFR seed
LBRACK [
INTCON 2
RBRACK ]
MULT *
IDENFR seed
LBRACK [
INTCON 2
RBRACK ]
SEMICN ;
IFTK if
LPARENT (
IDENFR staticvalue
LSS <
INTCON 0
RPARENT )
IDENFR staticvalue
ASSIGN =
IDENFR seed
LBRACK [
INTCON 2
RBRACK ]
PLUS +
IDENFR staticvalue
SEMICN ;
RETURNTK return
LPARENT (
IDENFR staticvalue
RPARENT )
SEMICN ;
RBRACE }
VOIDTK void
MAINTK main
LPARENT (
RPARENT )
LBRACE {
INTTK int
IDENFR n
SEMICN ;
INTTK int
IDENFR x
COMMA ,
IDENFR y
COMMA ,
IDENFR z
SEMICN ;
INTTK int
IDENFR tmp
ASSIGN =
INTCON 0
SEMICN ;
INTTK int
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
INTTK int
IDENFR j
ASSIGN =
INTCON 0
SEMICN ;
WHILETK while
LPARENT (
IDENFR j
LSS <
INTCON 1000
RPARENT )
LBRACE {
IDENFR a
LBRACK [
IDENFR j
RBRACK ]
ASSIGN =
INTCON 0
SEMICN ;
IDENFR j
ASSIGN =
IDENFR j
PLUS +
INTCON 1
SEMICN ;
RBRACE }
IDENFR n
ASSIGN =
IDENFR myscanf
LPARENT (
RPARENT )
SEMICN ;
IDENFR staticvalue
ASSIGN =
IDENFR myscanf
LPARENT (
RPARENT )
SEMICN ;
WHILETK while
LPARENT (
IDENFR n
GRE >
INTCON 0
RPARENT )
LBRACE {
IDENFR n
ASSIGN =
IDENFR n
MINU -
INTCON 1
SEMICN ;
IDENFR z
ASSIGN =
IDENFR rand
LPARENT (
RPARENT )
SEMICN ;
IDENFR x
ASSIGN =
IDENFR z
MINU -
IDENFR z
DIV /
INTCON 300000
MULT *
INTCON 300000
SEMICN ;
IDENFR z
ASSIGN =
IDENFR rand
LPARENT (
RPARENT )
SEMICN ;
IDENFR y
ASSIGN =
IDENFR z
MINU -
IDENFR z
DIV /
INTCON 2
MULT *
INTCON 2
SEMICN ;
IDENFR set
LPARENT (
IDENFR x
COMMA ,
IDENFR y
RPARENT )
SEMICN ;
RBRACE }
WHILETK while
LPARENT (
IDENFR i
LSS <
INTCON 1000
RPARENT )
LBRACE {
IDENFR tmp
ASSIGN =
IDENFR tmp
PLUS +
LPARENT (
IDENFR a
LBRACK [
IDENFR i
RBRACK ]
MINU -
IDENFR a
LBRACK [
IDENFR i
RBRACK ]
DIV /
INTCON 100000
MULT *
INTCON 100000
RPARENT )
SEMICN ;
IDENFR tmp
ASSIGN =
IDENFR tmp
MINU -
IDENFR tmp
DIV /
INTCON 100000
MULT *
INTCON 100000
SEMICN ;
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
SEMICN ;
RBRACE }
IDENFR myprintf
LPARENT (
IDENFR tmp
RPARENT )
SEMICN ;
RETURNTK return
SEMICN ;
RBRACE }
